import fnmatch
import telebot
import json
from telebot import types
from telebot.types import ReplyKeyboardRemove
from keyboa.keyboard import Keyboa
import os


# API –±–æ—Ç–∞
bot = telebot.TeleBot('6307682483:AAGq4H1Mh4PQ2F64410bTnwpd5nKQXWbmHM')

# –§—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫

global point_id_user
point_id_user = 1979945707

def input_address(message):
    global point_address
    point_address = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –°–°–´–õ–ö–£ –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:')
    bot.register_next_step_handler(msg,input_img)

def input_img(message):
    global point_img
    point_img = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–∫–∏:')
    bot.register_next_step_handler(msg,input_context)

def input_context(message):
    global point_context
    point_context = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É —Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')
    bot.register_next_step_handler(msg,input_lon_lat)

def input_lon_lat(message):
    point_lon_lat = message.text
    if fnmatch.fnmatch(str(point_lon_lat), '* *'):
        point_lon = str(point_lon_lat.split()[0])
        point_lat = point_lon_lat.split()[1]
        msg = bot.send_message(message.chat.id, '–¢–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')

        #–í —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π –∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Json

        new_data = {'id_user': point_id_user, 'address': point_address, 'img': point_img, 'context': point_context, 'lon': point_lon, 'lat': point_lat}
        with open('Read.json', encoding='utf8') as f:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
            data = json.load(f)  # –ü–æ–ª—É—á–∞–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ (–≤–æ–æ–±—â–µ –≤—Å–µ, –¥–∞)
        data.append(new_data)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        f.close()
        with open('Read.json', 'w', encoding='utf8') as outfile:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
            json.dump(data, outfile, ensure_ascii=False,
                      indent=2)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (–≤—Å–µ, —á—Ç–æ –±—ã–ª–æ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö + –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        outfile.close()
        default_buttons(message)
        quit(os.system("python3 main.py"))  # –ó–∞–∫—Ä–æ–µ—Ç –∏ –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä–æ–µ—Ç —Ñ–∞–π–ª (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ü–∏–∫–ª–µ)



    else:
        msg = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–≥–æ—Ç—ã –∏ —à–∏—Ä–æ—Ç—ã (–ø–æ—Å—Ç–∞–≤—å—Ç–µ –º–µ–∂–¥—É –Ω–∏–º–∏ –ø—Ä–æ–±–µ–ª, —É–±–µ—Ä–∏—Ç–µ –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏):')
        bot.register_next_step_handler(msg, input_lon_lat)


# –í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
def default_buttons(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É')
    btn2 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É')

    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, '–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª–µ–µ?', reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ù–∞—á–∞—Ç—å")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–±–∏—Ä–∞—Ç—å —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ.", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    adm = [908945149, 52881874]  # —Å–ø–∏—Å–æ–∫ –∏–∑ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, if –î–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—É
    if message.chat.id not in adm:
        bot.send_message(message.chat.id, '–ù–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ')
    else:

        if message.text == 'üëã –ù–∞—á–∞—Ç—å':

            default_buttons(message)


        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É':

            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏:', reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, input_address)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏
        elif message.text == '–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É':

            address_listing = []
            with open('Read.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
            f.close()
            for p_id in data:
                address_one = p_id.get('address')
                address_listing.append(address_one)

            # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π dict
            myDict = dict()
            myDict = {address_listing[i]: i for i in range(0, len(address_listing), 1)}
            myList = [{key.strip(): str(value)} for key, value in myDict.items()]
            kb_address = Keyboa(items=myList, items_in_row=3)
            bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', reply_markup= kb_address())

            @bot.callback_query_handler(func=lambda call: True)
            def callback_inline(call):
                search_value=call.data
                msg1 = next((key for item in myList for key, value in item.items() if value == search_value), None)
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)

                point_del = msg1
                with open('Read.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    minimal = 0
                    check = 0
                    for txt in data:
                        if txt['address'] == point_del:
                            data.pop(minimal)
                            check = check + 1
                        else:
                            None
                            minimal = minimal + 1
                if check == 1:
                    bot.send_message(message.chat.id, '–¢–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
                else:
                    bot.send_message(message.chat.id, '–¢–æ—á–∫–∞ —Å –¥–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
                f.close()
                with open('Read.json', 'w', encoding='utf-8') as outfile:
                    json.dump(data, outfile, ensure_ascii=False, indent=2)
                outfile.close()





bot.polling(none_stop=True, interval=0)